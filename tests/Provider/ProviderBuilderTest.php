<?php

declare(strict_types=1);

namespace Kefzce\CryptoCurrencyExchanges\Tests\Provider;

use Kefzce\CryptoCurrencyExchanges\DependencyInjection\ContainerBuilder\ContainerBuilder;
use Kefzce\CryptoCurrencyExchanges\Environment;
use Kefzce\CryptoCurrencyExchanges\Provider\AnotherProvider;
use Kefzce\CryptoCurrencyExchanges\Provider\NullProvider;
use Kefzce\CryptoCurrencyExchanges\Provider\ProviderBuilder;
use Kefzce\CryptoCurrencyExchanges\Provider\ProviderInterface;
use function Kefzce\CryptoCurrencyExchanges\removeDirectory;
use PHPUnit\Framework\TestCase;
use Symfony\Component\DependencyInjection\ContainerInterface;

class ProviderBuilderTest extends TestCase
{
    /**
     * @var string
     */
    private $cacheDirectory;

    public function setUp()
    {
        parent::setUp();
        $this->cacheDirectory = sys_get_temp_dir() . '/provider_test';

        if (false === file_exists($this->cacheDirectory)) {
            mkdir($this->cacheDirectory);
        }
    }

    public function tearDown()
    {
        parent::tearDown();

        unset($this->cacheDirectory);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @dataProvider correctProviderList
     *
     * @param ProviderInterface $provider
     */
    public function testCanCreateProviderBuilder($provider): void
    {
        $containerBuilder = new ContainerBuilder(Environment::create('providertest'));

        $containerBuilder->setCacheDirectoryPath($this->cacheDirectory);

        /** @var ContainerInterface $container */
        $container = $containerBuilder->build();
        $container->set(ProviderBuilder::class, new ProviderBuilder($container));
        $container->set((string) $provider, $provider);

        $builder = $container->get(ProviderBuilder::class);
        $provider = $builder->build(
            (string) $provider
        );

        $this->assertNotEmpty($provider);
        $this->assertInstanceOf(ProviderInterface::class, $provider);

        @unlink(sys_get_temp_dir() . '/provider_test');
        removeDirectory(sys_get_temp_dir() . '/provider_test');
    }

    /** @noinspection PhpUndefinedClassInspection */
    public function correctProviderList(): ?\Generator
    {
        yield [new NullProvider()];

        yield [new AnotherProvider()];
    }
}
